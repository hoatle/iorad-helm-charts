{{- $fullname := include "iorad-dev.fullname" . -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $fullname }}
  labels:
    app.kubernetes.io/name: {{ include "iorad-dev.name" . }}
    helm.sh/chart: {{ include "iorad-dev.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "iorad-dev.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "iorad-dev.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      initContainers:
      - name: init-src
        image: {{ .Values.src.image | quote }}
        imagePullPolicy: {{ .Values.src.pullPolicy }}
        command:
        - sh
        - -c
        - |
          echo "ls -al /opt/src"
          ls -al /opt/src

          echo "cp -rf /opt/src/. /opt/app/"
          cp -rf /opt/src/. /opt/app/

          echo "ls -al /opt/app"
          ls -al /opt/app

          echo "ls -al /opt/app/node"
          ls -al /opt/app/node

          echo "touch /opt/app/.src-copied"

          touch /opt/app/.src-copied

          echo "cp done"
        volumeMounts:
        - mountPath: /opt/app
          name: storage
          subPath: iorad
        - mountPath: /root/.cache/bower
          name: storage
          subPath: .cache-bower
        - mountPath: /root/.npm
          name: storage
          subPath: .cache-npm

      - name: wait-for-db
        image: mysql:{{ .Values.mysql.imageTag }}
        command:
        - sh
        - -c
        - |
          # TODO(hoatle): retry + timeout support
          echo "Waiting for mysqld to be ready (accepting connections)"
          until mysql -h $MYSQL_HOST -u $MYSQL_USER -p${MYSQL_PASSWORD} -e "SELECT 1"; do sleep 5; done
        envFrom:
        - configMapRef:
            name: {{ $fullname }}-db
        - secretRef:
            name: {{ $fullname }}-db

      - name: yarn-install
        image: {{ .Values.dev.image | quote }}
        imagePullPolicy: {{ .Values.dev.pullPolicy }}
        workingDir: /opt/app/node
        command:
        - sh
        - -c
        - |
          echo "pwd"

          pwd

          yarn install --network-timeout 1000000

          echo "touch /opt/app/node/.npm-installed"

          touch /opt/app/node/.npm-installed
        env:
        - name: NODE_ENV
          value: "development"
        - name: npm_config_tmp
          value: "/tmp"
        volumeMounts:
        - mountPath: /opt/app
          name: storage
          subPath: iorad
        - mountPath: /usr/local/share/.cache/yarn
          name: storage
          subPath: .cache-yarn

      containers:
      - name: dev
        image: {{ .Values.dev.image | quote }}
        imagePullPolicy: {{ .Values.dev.pullPolicy }}
        workingDir: /opt/app/node
        command:
        - sh
        - -c
        - |
          # create folders if not exist
          mkdir -p /mnt/storage/iorad/cache
          mkdir -p /mnt/storage/iorad/sitemaps
          mkdir -p /mnt/storage/iorad/crypto

          echo "pwd"
          pwd

          yarn install --tldjs-update-rules

          echo "yarn run dev"

          yarn run dev
        env:
        - name: NODE_ENV
          value: "development"
        - name: npm_config_tmp
          value: "/tmp"
        - name: NODE_PATH
          value: "/opt/app/node/src"
        - name: DOT_ENV
          value: "false"
        envFrom:
        - configMapRef:
            name: {{ $fullname }}-db
        - secretRef:
            name: {{ $fullname }}-db
        - configMapRef:
            name: {{ $fullname }}
        - secretRef:
            name: {{ $fullname }}
        volumeMounts:
        - mountPath: /opt/app
          name: storage
          subPath: iorad
        - mountPath: /usr/local/share/.cache/yarn
          name: storage
          subPath: .cache-yarn
        - mountPath: /mnt/storage
          name: storage
          subPath: iorad
        ports:
        - name: dev
          containerPort: {{ .Values.configMapEnv.PORT }}
          protocol: TCP
        {{- if .Values.dev.startupProbe }}
        startupProbe:
{{ toYaml .Values.dev.startupProbe | nindent 10 }}
        {{- end }}
        {{- if .Values.dev.livenessProbe }}
        livenessProbe:
{{ toYaml .Values.dev.livenessProbe | nindent 10 }}
        {{- end }}
        {{- if .Values.dev.readinessProbe }}
        readinessProbe:
{{ toYaml .Values.dev.readinessProbe | nindent 10 }}
        {{- end }}
        resources:
{{ toYaml .Values.dev.resources | nindent 10 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | nindent 8 }}
    {{- end }}
    {{- if .Values.volumes }}
      volumes:
      {{- range .Values.volumes }}
      {{- if .persistentVolumeClaim }}
      - name: {{ .name }}
        persistentVolumeClaim:
          {{- if .persistentVolumeClaim.existing }}
          claimName: {{ .persistentVolumeClaim.claimName }}
          {{- else }}
          claimName: {{ $fullname }}-{{ .persistentVolumeClaim.claimName }}
          {{- end }}
          readOnly: {{ default false .persistentVolumeClaim.readOnly }}
      {{- else }}
      - {{ . | toYaml | nindent 8 | trim }}
      {{- end }}
      {{- end }}
    {{- end }}
    {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.imagePullSecrets | nindent 6 }}
    {{- end }}
